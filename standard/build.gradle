plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "cc.fastcv.standard"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            ndkBuild {
                // Passes an optional argument to ndk-build.
                arguments "NDK_MODULE_PATH+=../../third_party/modules"
            }
            // For ndk-build, instead use the ndkBuild block.
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"

                // Sets a flag to enable format macro constants for the C compiler.
                cFlags "-D__STDC_FORMAT_MACROS"

                // Sets optional flags for the C++ compiler.
                cppFlags "-fexceptions", "-frtti"

                // Specifies the library and executable targets from your CMake project
                // that Gradle should build.
                targets "libexample-one", "my-executible-demo"
            }
        }

        manifestPlaceholders = [
                APP_TEST : "asdas",
        ]
        buildConfigField("boolean", "TEST", "false")
    }



    sourceSets {
        dev {}
        google {}
        huawei {}
        other {
            java.srcDirs += ['src/other/kotlin']
            res.srcDirs += ['src/other/res1', 'src/other/res2']
            manifest.srcFile 'src/other/AndroidManifest.xml'
        }
        main{

            jniLibs.srcDirs = ['libs']
            jni.srcDirs = []
            res.srcDirs = ['src/custom/res','src/main/res']
            java.srcDirs = ['src/main/java']
            manifest.srcFile 'src/main/AndroidManifest.xml'
            assets.srcDirs=['src/custom/assets']
        }
    }

    signingConfigs {
        release {
            storeFile file("./keystore/release.jks")
            storePassword "pisto."
            keyAlias "root"
            keyPassword "pisto."
        }
        debug {
            storeFile file("./keystore/debug.jks")
            storePassword "pisto."
            keyAlias "root"
            keyPassword "pisto."
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false //启用混淆器
            shrinkResources false //去掉无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField("boolean", "LOG_DEBUG", "false")
            buildConfigField "String", "UM_APPKEY", "\"t613623b65f3497702f22211f\""

            manifestPlaceholders = [
                    JPUSH_APPKEY : "a788464668489a", //JPush上注册的包名对应的appkey.
                    JPUSH_CHANNEL: "releaseChannel", //暂时填写默认值即可.
            ]
        }

        debug {
            zipAlignEnabled true
            debuggable true  //启用debug的buildType配置
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            buildConfigField("boolean", "LOG_DEBUG", "true")
            buildConfigField "String", "UM_APPKEY", "\"t613623b65f3497702f22211f\""

            manifestPlaceholders = [
                    JPUSH_APPKEY : "a12131546515a", //JPush上注册的包名对应的appkey.
                    JPUSH_CHANNEL: "defaultChannel", //暂时填写默认值即可.
            ]
        }
    }

    //如果使用不同的java文件，只需要在src目录下取渠道名称就行，然后新建java/com......就行，但是在main包下不要存在
    flavorDimensions "default"
    productFlavors {
        dev {
            versionNameSuffix "-dev"
            applicationIdSuffix '.dev'
            versionCode 2
            manifestPlaceholders = [SD_CHANNEL_VALUE     : "dev"]
            buildConfigField("int", "APP_PLATFORM", "1")
            resConfigs "zh-rCN","en"
        }
        google {
            versionNameSuffix "-google"
            applicationIdSuffix '.google'
            versionCode 4
            manifestPlaceholders = [SD_CHANNEL_VALUE     : "google"]
            buildConfigField("int", "APP_PLATFORM", "2")
            resConfigs "zh-rCN"
        }
        huawei {
            versionNameSuffix "-huawei"
            applicationIdSuffix '.huawei'
            versionCode 10
            manifestPlaceholders = [SD_CHANNEL_VALUE     : "huawei"]
            buildConfigField("int", "APP_PLATFORM", "3")
            resConfigs "en"
        }
        other {
            versionNameSuffix "-other"
            applicationId "cc.fastcv.standard.other"
            versionCode 10
            manifestPlaceholders = [SD_CHANNEL_VALUE     : "other"]
            buildConfigField("int", "APP_PLATFORM", "4")
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def value = getBuildConfigFieldValue(variant,"APP_PLATFORM")
            def fileName = "standard_v${defaultConfig.versionName}_${variant.name}_${releaseTime()}_channel_${value}.apk"
//            variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk/${variant.name}/")
            outputFileName = fileName


        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }


}

static String getBuildConfigFieldValue(def variant, def fiedName) {
    def properties = variant.productFlavors[0].properties
    def name = properties.get("name")
    if (name != variant.flavorName) {
        return ""
    }
    def configs = properties.get("buildConfigFields")
    def address = null
    for (Map.Entry<String, Object> item : configs) {
        def key = item.key
        if (key == fiedName) {
            address = item.value
        }
    }
    if (address == null) return ""
    def field = address.getClass().getDeclaredField("value")
    field.setAccessible(true)
    return field.get(address)
}

//UTC:世界统一时间，不属于任意时区
static def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    googleImplementation('com.google.code.gson:gson:2.9.0')
}